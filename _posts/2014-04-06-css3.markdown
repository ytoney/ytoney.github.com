---
layout: post
title:  "css3"
date:   2014-04-06 20:40:34
categories: categories/css3
---


####css3简介####

css3模块：css3被划分为模块，其中最重要的css3模块包括：

<ul>
  <li>选择器</li>
  <li>框模型</li>
  <li>背景和边框</li>
  <li>文本效果</li>
  <li>2d/3d转</li>
  <li>动画</li>
  <li>多列布局</li>
  <li>用户界</li>
</ul>

####css3边框####

新的边框属性：

<table class="table table-bordered">
  <tbody>
    <tr>
      <th>属性</th>
      <th>描述</th>
      <th>CSS</th>
    </tr>
    <tr>
      <td><a href="＃" title="CSS3 border-image 属性">border-image</a></td>
      <td>设置所有 border-image-* 属性的简写属性。</td>
      <td>3</td>
    </tr>
    <tr>
      <td><a href="＃" title="CSS3 border-radius 属性">border-radius</a></td>
      <td>设置所有四个 border-*-radius 属性的简写属性。</td>
      <td>3</td>
    </tr>
    <tr>
      <td><a href="＃" title="CSS3 box-shadow 属性">box-shadow</a></td>
      <td>向方框添加一个或多个阴影。</td>
      <td>3</td>
    </tr>
  </tbody>
</table>


浏览器支持：

Internet Explorer 9+ 支持 border-radius 和 box-shadow 属性。不支持border-image属性。

Firefox、Chrome 以及 Safari 支持所有新的边框属性。

注释：对于 border-image，Safari 5 以及更老的版本需要前缀 -webkit-。

Opera 支持 border-radius 和 box-shadow 属性，但是对于 border-image 需要前缀 -o-。


####css3背景####

新的背景属性

属性  描述  CSS

<code>background-clip</code> 规定背景的绘制区域。  3

<code>background-origin</code> 规定背景图片的定位区域。  3

<code>background-size</code> 规定背景图片的尺寸。  3

<style type="text/css">
.bg-linear-gradient {
  height: 200px;
  color: #fff;
  text-align: center;
  text-shadow: 1px 1px 2px rgba(0,0,0,.5);

  background: linear-gradient(
    to right,
    #ff9e2c 0%,
    #ff9e2c 50%,
    #b6701e 50%,
    #b6701e 100%
    );
}
</style>
<div class="bg-linear-gradient">
<b>background: linear-gradient</b>( to right, #ff9e2c 0%, #ff9e2c 50%, #b6701e 50%, #b6701e 100% );
</div>

<style>
  .bg-clip {
    width: 700px;
    margin: 20px auto;
    background-color: #fff;
    padding: 2em;
    -webkit-transform: translateZ(-200px) translateY(0) rotateX(0deg) rotateY(-15deg);
    transform: translateZ(-200px) translateY(0) rotateX(0deg) rotateY(-15deg);
    box-shadow: 0px 0px 5px rgba(0,0,0,0.2);
    -webkit-transition: -webkit-transform 1s ease;
    transition: transform 1s ease;
    outline: 1px solid transparent;
  }
  .clipped {
    background: url(http://blog.smartbear.com/wp-content/uploads/2015/03/html6.jpg) no-repeat center center;
    background-size: cover;
    color: #fff;
    text-align: center;
    padding: 2em;
    /* -webkit-background-clip clips the background of the element to the text */
    -webkit-text-fill-color: transparent; /* overrides the white text color in webkit browsers */
    -webkit-background-clip: text;
  }
  .bg-clip h1{
    font: 10em/0.7 "disco_deckregular", sans-serif;
    text-shadow: 0 0 1px rgba(0,0,0,.1);
    -webkit-transition: text-shadow 1s ease;
    transition: text-shadow 1s ease;
  }
</style>
<div class="bg-clip">
  <div class="clipped">
    <h1>CO<br/>OK</h1>
  </div>
</div>


<code>-webkit-text-fill-color: transparent;</code>

<code>-webkit-background-clip: text;</code>


####CSS3 文本效果####

<ul>
  <li>text-shadow</li>
  <li>word-wrap</li>
</ul>

Internet Explorer 10、Firefox、Chrome、Safari 以及 Opera 支持 text-shadow 属性。

所有主流浏览器都支持 word-wrap 属性。

注释：Internet Explorer 9 以及更早的版本，不支持 text-shadow 属性。


####CSS3 字体####

CSS3 @font-face 浏览器支持

Firefox、Chrome、Safari 以及 Opera 支持 .ttf (True Type Fonts) 和 .otf (OpenType Fonts) 类型的字体。

Internet Explorer 9+ 支持新的 @font-face 规则，但是仅支持 .eot 类型的字体 (Embedded OpenType)。

注释：Internet Explorer 8 以及更早的版本不支持新的 @font-face 规则。

####css3 2d转换####

通过css3转换，可以对元素进行移动、缩放、转动、拉长或拉伸。转换是使元素改变形状、尺寸和位置的一种效果。可以使用2d或3d转换来转换元素。

#####浏览器支持#####

Internet Explorer 10、Firefox 以及 Opera 支持 transform 属性。

Chrome 和 Safari 需要前缀 -webkit-。

注释：Internet Explorer 9 需要前缀 -ms-。


<h5>2D Transform 方法</h5>

<ul>
  <li><code>translate()</code> ：通过 translate() 方法，元素从其当前位置移动，根据给定的 left（x 坐标） 和 top（y 坐标）</li>
  <li><code>rotate()</code> ：通过 rotate() 方法，元素顺时针旋转给定的角度。允许负值，元素将逆时针旋转。</li>
  <li><code>scale()</code> ：通过 scale() 方法，元素的尺寸会增加或减少，根据给定的宽度（X 轴）和高度（Y 轴）参数。</li>
  <li><code>skew()</code> ：通过 skew() 方法，元素翻转给定的角度，根据给定的水平线（X 轴）和垂直线（Y 轴）参数。</li>
  <li><code>matrix()</code> ：matrix() 方法把所有 2D 转换方法组合在一起。matrix() 方法需要六个参数，包含数学函数，允许您：旋转、缩放、移动以及倾斜元素。</li>
</ul>

<div>
  <table class="table table-bordered">
    <tbody>
      <tr>
        <th style="width:25%;">函数</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>matrix(<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>)</td>
        <td>定义 2D 转换，使用六个值的矩阵。</td>
      </tr>
      <tr>
        <td>translate(<i>x</i>,<i>y</i>)</td>
        <td>定义 2D 转换，沿着 X 和 Y 轴移动元素。</td>
      </tr>
      <tr>
        <td>translateX(<i>n</i>)</td>
        <td>定义 2D 转换，沿着 X 轴移动元素。</td>
      </tr>
      <tr>
        <td>translateY(<i>n</i>)</td>
        <td>定义 2D 转换，沿着 Y 轴移动元素。</td>
      </tr>
      <tr>
        <td>scale(<i>x</i>,<i>y</i>)</td>
        <td>定义 2D 缩放转换，改变元素的宽度和高度。</td>
      </tr>
      <tr>
        <td>scaleX(<i>n</i>)</td>
        <td>定义 2D 缩放转换，改变元素的宽度。</td>
      </tr>
      <tr>
        <td>scaleY(<i>n</i>)</td>
        <td>定义 2D 缩放转换，改变元素的高度。</td>
      </tr>
      <tr>
        <td>rotate(<i>angle</i>)</td>
        <td>定义 2D 旋转，在参数中规定角度。</td>
      </tr>
      <tr>
        <td>skew(<i>x-angle</i>,<i>y-angle</i>)</td>
        <td>定义 2D 倾斜转换，沿着 X 和 Y 轴。</td>
      </tr>
      <tr>
        <td>skewX(<i>angle</i>)</td>
        <td>定义 2D 倾斜转换，沿着 X 轴。</td>
      </tr>
      <tr>
        <td>skewY(<i>angle</i>)</td>
        <td>定义 2D 倾斜转换，沿着 Y 轴。</td>
      </tr>
    </tbody>
  </table>
</div>

实例：
<div class="clearfix">
  <div class="well span5">
    <div class="box">translate() 方法: transform: translate(100px,10px);把元素从左侧移动100px，从顶端移动10px。</div>
  </div>
  <div class="well span5">
    <div class="translate box">translate() 方法: transform: translate(100px,10px);把元素从左侧移动100px，从顶端移动10px。</div>
  </div>
  <div class="well span5">
    <div class="box">transform: rotate(30deg);值 rotate(30deg) 把元素顺时针旋转 30 度。</div>
  </div>
  <div class="well span5">
    <div class="rotate box">transform: rotate(30deg);值 rotate(30deg) 把元素顺时针旋转 30 度。</div>
  </div>
  <div class="well span5">
    <div class="box">transform: scale(1.5,1.2); 把宽度转换为原始尺寸的 1.5 倍，把高度转换为原始高度的 1.2 倍。</div>
  </div>
  <div class="well span5">
    <div class="scale box">transform: scale(1.5,1.2); 把宽度转换为原始尺寸的 1.5 倍，把高度转换为原始高度的 1.2 倍。</div>
  </div>
  <div class="well span5">
    <div class="box">transform: skew(30deg,20deg);值 skew(30deg,20deg) 围绕 X 轴把元素翻转 30 度，围绕 Y 轴翻转 20 度。</div>
  </div>
  <div class="well span5">
    <div class="skew box">transform: skew(30deg,20deg);值 skew(30deg,20deg) 围绕 X 轴把元素翻转 30 度，围绕 Y 轴翻转 20 度。</div>
  </div>
  <div class="well span5">
    <div class="box">transform: matrix(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);</div>
  </div>
  <div class="well span5">
    <div class="matrix box">transform: matrix(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);</div>
  </div>
</div>
<style>
  .box{
    display: inline-block;
    border-radius: 8px;
    width: 210px;
    height: 80px;
    border: 1px solid #aaa;
    background: #fff;
    padding: 5px;
  }
  .well.span5{
    margin: 0 20px 20px 0;
  }
  .translate{
    -ms-transform: translate(100px,10px);
    -webkit-transform: translate(100px,10px);
    -moz-transform: translate(100px,10px);
    -o-transform: translate(100px,10px);
    transform: translate(100px,10px);
  }
  .rotate{
    -ms-transform: rotate(30deg);
    -webkit-transform: rotate(30deg);
    -moz-transform: rotate(30deg);
    -o-transform: rotate(30deg);
    transform: rotate(30deg);
  }
  .scale{
    -ms-transform: scale(1.5,1.2);
    -webkit-transform: scale(1.5,1.2);
    -moz-transform: scale(1.5,1.2);
    -o-transform: scale(1.5,1.2);
    transform: scale(1.5,1.2);
  }
  .skew{
    -ms-transform: skew(30deg,20deg);
    -webkit-transform: skew(30deg,20deg);
    -moz-transform: skew(30deg,20deg);
    -o-transform: skew(30deg,20deg);
    transform: skew(30deg,20deg);
  }
  .matrix{
    -ms-transform: matrix(1.0, 1.0, 0, 1.0, 1.0, 1.0);
    -webkit-transform: matrix(1.0, 1.0, 0, 1.0, 1.0, 1.0);
    -moz-transform: matrix(1.0, 1.0, 0, 1.0, 1.0, 1.0);
    -o-transform: matrix(1.0, 1.0, 0, 1.0, 1.0, 1.0);
    transform: matrix(1.0, 1.0, 0, 1.0, 1.0, 1.0);
  }
</style>

####CSS3 3D 转换####

Internet Explorer 10 和 Firefox 支持 3D 转换。

Chrome 和 Safari 需要前缀 -webkit-。

Opera 仍然不支持 3D 转换（它只支持 2D 转换）。

<div>
  <h5>3D Transform 方法</h5>

  <table class="table table-bordered">
    <tbody>
      <tr>
        <th style="width:25%;">函数</th>
        <th>描述</th>
      </tr>

      <tr>
        <td>matrix3d(<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<br><i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>)</td>
        <td>定义 3D 转换，使用 16 个值的 4x4 矩阵。</td>
      </tr>

      <tr>
        <td>translate3d(<i>x</i>,<i>y</i>,<i>z</i>)</td>
        <td>定义 3D 转化。</td>
      </tr>

      <tr>
        <td>translateX(<i>x</i>)</td>
        <td>定义 3D 转化，仅使用用于 X 轴的值。</td>
      </tr>

      <tr>
        <td>translateY(<i>y</i>)</td>
        <td>定义 3D 转化，仅使用用于 Y 轴的值。</td>
      </tr>

      <tr>
        <td>translateZ(<i>z</i>)</td>
        <td>定义 3D 转化，仅使用用于 Z 轴的值。</td>
      </tr>

      <tr>
        <td>scale3d(<i>x</i>,<i>y</i>,<i>z</i>)</td>
        <td>定义 3D 缩放转换。</td>
      </tr>

      <tr>
        <td>scaleX(<i>x</i>)</td>
        <td>定义 3D 缩放转换，通过给定一个 X 轴的值。</td>
      </tr>

      <tr>
        <td>scaleY(<i>y</i>)</td>
        <td>定义 3D 缩放转换，通过给定一个 Y 轴的值。</td>
      </tr>

      <tr>
        <td>scaleZ(<i>z</i>)</td>
        <td>定义 3D 缩放转换，通过给定一个 Z 轴的值。</td>
      </tr>

      <tr>
        <td>rotate3d(<i>x</i>,<i>y</i>,<i>z</i>,<i>angle</i>)</td>
        <td>定义 3D 旋转。</td>
      </tr>

      <tr>
        <td>rotateX(<i>angle</i>)</td>
        <td>定义沿 X 轴的 3D 旋转。</td>
      </tr>

      <tr>
        <td>rotateY(<i>angle</i>)</td>
        <td>定义沿 Y 轴的 3D 旋转。</td>
      </tr>

      <tr>
        <td>rotateZ(<i>angle</i>)</td>
        <td>定义沿 Z 轴的 3D 旋转。</td>
      </tr>

      <tr>
        <td>perspective(<i>n</i>)</td>
        <td>定义 3D 转换元素的透视视图。</td>
      </tr>
    </tbody>
  </table>
</div>


####css3 过渡####

通过 CSS3，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。

浏览器支持

Internet Explorer 10、Firefox、Chrome 以及 Opera 支持 transition 属性。

Safari 需要前缀 -webkit-。

注释：Internet Explorer 9 以及更早的版本，不支持 transition 属性。

注释：Chrome 25 以及更早的版本，需要前缀 -webkit-。

CSS3 过渡是元素从一种样式逐渐改变为另一种的效果。

要实现这一点，必须规定两项内容：

<ul>
  <li>规定您希望把效果添加到哪个 CSS 属性上</li>
  <li>规定效果的时长</li>
</ul>

实例：

<div class="transition"></div>

<style>
.transition{
  width: 100px;
  height: 100px;
  border-radius: 6px;
  background-color: #ddd;
  opacity: .7;
  transition: transform 2s, opacity 2s, border-radius 1s;
  -moz-transition: -moz-transform 2s, opacity 2s, border-radius 1s;
  -webkit-transition: -webkit-transform 2s, opacity 2s, border-radius 1s;
  -o-transition:-o-transform 2s, opacity 2s, border-radius 1s;
  /*-webkit-transform-origin: 50% 50%;*/
}
.transition:hover{
  opacity: 1;
  border-radius: 50px;
  -webkit-transform: rotate(360deg) scale(1.5,1.5);
  -ms-transform: rotate(360deg) scale(1.5,1.5);
  transform: rotate(360deg) scale(1.5,1.5);
}
</style>


####CSS3 动画####

通过 CSS3，我们能够创建动画，这可以在许多网页中取代动画图片、Flash 动画以及 JavaScript。

CSS3 @keyframes 规则

如需在 CSS3 中创建动画，您需要学习 @keyframes 规则。

@keyframes 规则用于创建动画。在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。

浏览器支持

Internet Explorer 10、Firefox 以及 Opera 支持 @keyframes 规则和 animation 属性。

Chrome 和 Safari 需要前缀 -webkit-。

注释：Internet Explorer 9，以及更早的版本，不支持 @keyframe 规则或 animation 属性。

CSS3 动画属性

下面的表格列出了 @keyframes 规则和所有动画属性：

属性  描述  CSS

<code>@keyframes</code>  规定动画。 3

<code>animation</code> 所有动画属性的简写属性，除了 animation-play-state 属性。 3

<code>animation-name</code>  规定 @keyframes 动画的名称。  3

<code>animation-duration</code>  规定动画完成一个周期所花费的秒或毫秒。默认是 0。 3

<code>animation-timing-function</code> 规定动画的速度曲线。默认是 "ease"。 3

<code>animation-delay</code> 规定动画何时开始。默认是 0。 3

<code>animation-iteration-count</code> 规定动画被播放的次数。默认是 1。 3

<code>animation-direction</code> 规定动画是否在下一周期逆向地播放。默认是 "normal"。  3

<code>animation-play-state</code>  规定动画是否正在运行或暂停。默认是 "running"。  3

<code>animation-fill-mode</code> 规定对象动画时间之外的状态。  3


_animation-name: myfirst;_

_animation-duration: 5s;_

_animation-timing-function: linear;_

_animation-delay: 3s;_

_animation-iteration-count: infinite;_

_animation-direction: alternate;_

_animation-play-state: running;_

_animation: myfirst 5s linear 3s infinite alternate;_


实例：

<div class="animation"></div>

<style>
  .animation{
    width: 100px;
    height: 100px;
    opacity: .2;
    background-color: #ddd;
    -webkit-animation: myfirst 5s linear 3s infinite alternate;
    -moz-animation: myfirst 5s linear 3s infinite alternate;
    -o-animation: myfirst 5s linear 3s infinite alternate;
    animation: myfirst 5s linear 3s infinite alternate;
  }
  @-webkit-keyframes myfirst {
    0% {
      /* style */
      width: 100px;
      height: 100px;
      background-color: #ddd;
      opacity: .2;
      border-radius: 8px;
    }
    100% {
      opacity: 1;
      border-radius: 50px;
      -webkit-transform: translate(300px,0) rotate(360deg);
      -moz-transform: translate(300px,0) rotate(360deg);
      -ms-transform: translate(300px,0) rotate(360deg);
      -o-transform: translate(300px,0) rotate(360deg);
      transform: translate(300px,0) rotate(360deg);
      transition: transform 2s opacity 2s border-radius 2s;
    }
  }
  @-moz-keyframes myfirst {
    0% {
      /* style */
      width: 100px;
      height: 100px;
      background-color: #ddd;
      opacity: .2;
      border-radius: 8px;
    }
    100% {
      opacity: 1;
      border-radius: 50px;
      -webkit-transform: translate(300px,0) rotate(360deg);
      -moz-transform: translate(300px,0) rotate(360deg);
      -ms-transform: translate(300px,0) rotate(360deg);
      -o-transform: translate(300px,0) rotate(360deg);
      transform: translate(300px,0) rotate(360deg);
      transition: transform 2s opacity 2s border-radius 2s;
    }
  }
  @-ms-keyframes myfirst {
    0% {
      /* style */
      width: 100px;
      height: 100px;
      background-color: #ddd;
      opacity: .2;
      border-radius: 8px;
    }
    100% {
      opacity: 1;
      border-radius: 50px;
      -webkit-transform: translate(300px,0) rotate(360deg);
      -moz-transform: translate(300px,0) rotate(360deg);
      -ms-transform: translate(300px,0) rotate(360deg);
      -o-transform: translate(300px,0) rotate(360deg);
      transform: translate(300px,0) rotate(360deg);
      transition: transform 2s opacity 2s border-radius 2s;
    }
  }
  @-o-keyframes myfirst {
    0% {
      /* style */
      width: 100px;
      height: 100px;
      background-color: #ddd;
      opacity: .2;
      border-radius: 8px;
    }
    100% {
      opacity: 1;
      border-radius: 50px;
      -webkit-transform: translate(300px,0) rotate(360deg);
      -moz-transform: translate(300px,0) rotate(360deg);
      -ms-transform: translate(300px,0) rotate(360deg);
      -o-transform: translate(300px,0) rotate(360deg);
      transform: translate(300px,0) rotate(360deg);
      transition: transform 2s opacity 2s border-radius 2s;
    }
  }
  @keyframes myfirst {
    0% {
      /* style */
      width: 100px;
      height: 100px;
      background-color: #ddd;
      opacity: .2;
      border-radius: 8px;
    }
    100% {
      opacity: 1;
      border-radius: 50px;
      -webkit-transform: translate(300px,0) rotate(360deg);
      -moz-transform: translate(300px,0) rotate(360deg);
      -ms-transform: translate(300px,0) rotate(360deg);
      -o-transform: translate(300px,0) rotate(360deg);
      transform: translate(300px,0) rotate(360deg);
      transition: transform 2s opacity 2s border-radius 2s;
    }
  }
</style>


####css3 多列####

<ul>
  <li>column-count</li>
  <li>column-gap</li>
  <li>column-rule</li>
</ul>

浏览器支持

Internet Explorer 10 和 Opera 支持多列属性。

Firefox 需要前缀 -moz-。

Chrome 和 Safari 需要前缀 -webkit-。

注释：Internet Explorer 9 以及更早的版本不支持多列属性。

新的多列属性

下面的表格列出了所有的转换属性：

属性  描述  CSS

<code>column-count </code> 规定元素应该被分隔的列数。 3

<code>column-fill</code> 规定如何填充列。  3

<code>column-gap</code> 规定列之间的间隔。 3

<code>column-rule</code> 设置所有 column-rule-* 属性的简写属性。 3

<code>column-rule-color</code> 规定列之间规则的颜色。 3

<code>column-rule-style</code> 规定列之间规则的样式。 3

<code>column-rule-width</code> 规定列之间规则的宽度。 3

<code>column-span</code> 规定元素应该横跨的列数。  3

<code>column-width</code> 规定列的宽度。 3

<code>columns</code> 规定设置 column-width 和 column-count 的简写属性。 3
